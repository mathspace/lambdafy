# Commented out items are optional. Rest are required.

# name is used for AWS resources and to uniquely identify the app
# Using the same name in the same AWS account and region will result in
# conflict and overwriting behavior.
# If your app has different stages (e.g. staging,production), create two
# spec files with different names (e.g. my-great-app-staging,
# my-great-app-production). Essentially, treat each stage as a separate
# app. Same for environments or variations of your app.
name: my-great-app

# Docker image to use. If an ECR image URI is given, it is used as is to
# create the function. However, if a non-ECR image is specified, it's
# run through `lambdafy make` and `lambdafy push` first and the
# resulting ECR image name is used instead.
# When specifying a non-ECR image URI, you can set 'create_repo' and
# 'repo_name' config as well to tune the default behavior.
image: ubuntu

# create_repo specifies whether to create the ECR repo if it doesn't
# exist, for non-ECR images. It's true by default. This is equivalent to
# `-c` option of `lambdafy push`.
#
# create_repo: true

# repo_name specifies the name of the ECR repo that is used for non-ECR
# images. By default, it's set to the function name.
#
# repo_name: my-great-app

# role is the name of a IAM role.
# Run `lambdafy example-role` to see terraform definition for a basic
# role needed to run the lambda function.
# You can let lambdafy generate a role for you by specifying the literal
# 'generate'. The generated role will be named 'lambdafy-XXXX' where
# 'XXXX' is the MD5 sum of the policies. You can add additional policy
# using role_extra_policy.
role: generate
# role_extra_policy allows specifying extra policy statements when using
# 'role: generate'.
#
# role_extra_policy:
#   - effect: Allow
#     action:
#       - "s3:GetObject"
#     resource:
#       - "*"

# env defines the environmental variables available to the app. The
# values follow the format for https://pkg.go.dev/github.com/oxplot/starenv :
#
# - Values starting with asterisk (*) are treated specially. In addition to all
#   the starenv derefers, lambdafy adds the following derefers:
#
#   - lambdafy_sqs_send: This derefer will be replaced with a URL which when POSTed
#     to will send a message to the SQS queue whose ARN is specified. The body
#     of the POST will be sent as the SQS message body. If header
#     'Lambdafy-SQS-Group-Id' is set, it will be used as Group ID for the
#     message. A 2xx/3xx response is considered a success, otherwise a fail. See
#     the example below for usage.
#
# - All other values are treated as literals.
#
# env:
#   FOO: "bar"
#   ABC: "123"
#   API_KEY: "*ssm:/my-great-app/key"
#   CONFIG: "*s3:app-bucket/path/to/config"
#   SQS_SEND_URL: "*lambdafy_sqs_send:arn:aws:sqs:us-east-1:123456789012:my-queue"

# entrypoint is analogous to Dockerfile ENTRYPOINT directive. Specifying
# it will override the existing ENTRYPOINT in the docker image. Note
# that '/lambdafy-proxy' is prepended to the list you specify here
# unless the list already starts with it.
#
# entrypoint:
#   - /bin/sh
#   - -c

# command is analogous to Dockerfile CMD directive. Specifying it will
# override the existing CMD in the docker image.
#
# command:
#  - /my-great-app $FOO --key=$API_KEY

# memory specifies the amount of RAM available to lambda function in
# MBs. Defatuls to 128 and can be up to 10240 in 1 increments.
#
# memory: 128

# timeout specifies the maximum amount of time in seconds the lambda
# function is allowed to run. Defaults to 3 and can be up to 900 in 1
# second increments.
#
# timeout: 3

# tags will be applied to the function as regular AWS resource tags.
# Tag `Name` will be applied by default set to the function name defined
# above. It can be overriden here.
#
# tags:
#   environment: production
#   team: data-science

# temp_size is the amount of temporary/ephemeral storage available to
# each invokation of the function in MB. This is usually mounted on /tmp while
# the rest of the filesystem is readonly. Defaults to 512.
#
# temp_size: 512

# efs_mounts is the list of AWS Elastic File System mounts.
#
# efs_mounts:
#   - arn: ...             # EFS endpoint ARN
#     path: /mnt/database  # Mount path inside the function

# Needed to allow the function to talk to resources running inside a
# VPC. VPC ID is unnecessary and it's automatically inferred based on the
# subnets.
#
# vpc_security_group_ids:
#   - "sg-1234678"
#   - "sg-6573452"
# vpc_subnet_ids:
#   - "34623423"

# cors enables cross-origin resource sharing (CORS) for the function.
# If specified, the function will respond to OPTIONS requests with
# appropriate CORS headers.
#
# cors: false

# sqs_triggers define the list of SQS queues to trigger the function.
# When a message arrives in the queue, the lambdafy proxy will send a POST HTTP
# request to /_lambdafy/sqs path with the body set to the SQS message body.
# A 2xx/3xx response is considered a success and the message is deleted from the
# queue. Any other response is considered a failure and the message is left in
# the queue. When batch size is greater than 1, batch_size concurrent HTTP
# requests will be made.
#
# GOTCHA: When deploying, SQS triggers of old versions is first disabled and
# then the triggers for the deploying version is enabled, before HTTP traffic is
# routed to the new version. This means that /_lambdafy/sqs endpoint should be
# able to process old messages (which may have different schemas) as well as new
# ones.
#
# sqs_triggers:
#   - arn: arn:aws:sqs:us-east-1:123456789012:my-queue
#     batch_size: 1

# allowed_account_regions is a list of account:region that specify which
# AWS account and region combinations are allowed to be deployed to.
# This ensures accidental overwrites do not happen. Shell style wildcards can be
# used for both account and region parts.
# If unspecified, all regions and all accounts are allowed.
#
# allowed_account_regions:
#   - "*:us-*"  # any account and us regions
#   - "123456789:ap-southeast-2"  # specific region of specific account
